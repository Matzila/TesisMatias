#Importing Essentials
import pandas as pd
from sklearn import metrics
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.svm import LinearSVC
from sklearn.svm import SVC
from sklearn.naive_bayes import MultinomialNB
from sklearn.naive_bayes import GaussianNB
from sklearn.naive_bayes import BernoulliNB
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingRegressor
 
 
import pymongo
from pymongo import MongoClient
client = MongoClient ('localhost',27017)
db = client.tesis
candidatos = db.Candidatos
 
from warnings import simplefilter
simplefilter(action='ignore', category=FutureWarning)
 
 
processedTweets = []
contador = 0        
for tweet in candidatos.find({"$or": [{'sentiment':"positivo"},{'sentiment':"negativo"}]},no_cursor_timeout=True):
    orden = contador
    text = tweet['text']
    _id = tweet["_id"]
    sentiment = tweet['sentiment']
    processedTweets.append({'orden':orden,'text':text,'_id':_id,'sentiment':sentiment})
    frame_tweets = pd.DataFrame(processedTweets, columns = ['orden','text','_id','sentiment'])
    contador = contador +1
    
print (frame_tweets.shape)
 
            
processedTweetsX = frame_tweets.text
processedTweetsY = frame_tweets.sentiment
#Using CountVectorizer to convert text into tokens/features
vect = CountVectorizer(stop_words='english', ngram_range = (1,1), max_df = .80, min_df = 4)
X_train, X_test, y_train, y_test = train_test_split(processedTweetsX,processedTweetsY,random_state=1, test_size= 0.2)
#Using training data to transform text into counts of features for each message
vect.fit(X_train)
X_train_dtm = vect.transform(X_train) 
X_test_dtm = vect.transform(X_test)
 
#Accuracy using Naive Bayes Model
NB = MultinomialNB(alpha = 0.001)
NB.fit(X_train_dtm, y_train)
y_predNB = NB.predict(X_test_dtm)
print('\nNaive Bayes Multinomial')
print('Accuracy Score: ',metrics.accuracy_score(y_test,y_predNB)*100,'%',sep='')
print('Confusion Matrix: ',metrics.confusion_matrix(y_test,y_predNB), sep = '\n')
 
#Accuracy using Naive Bayes Model
NB = BernoulliNB(alpha = 0.001)
NB.fit(X_train_dtm, y_train)
y_predNB = NB.predict(X_test_dtm)
print('\nNaive Bayes BernoulliNB')
print('Accuracy Score: ',metrics.accuracy_score(y_test,y_predNB)*100,'%',sep='')
print('Confusion Matrix: ',metrics.confusion_matrix(y_test,y_predNB), sep = '\n')
 
 
 
#Accuracy using SVM Model
SVM = LinearSVC(C=0.0100000,max_iter= 100000)
SVM.fit(X_train_dtm, y_train)
y_predSVM = SVM.predict(X_test_dtm)
print('\nSupport Vector Machine')
print('Accuracy Score: ',metrics.accuracy_score(y_test,y_predSVM)*100,'%',sep='')
print('Confusion Matrix: ',metrics.confusion_matrix(y_test,y_predSVM), sep = '\n')
 
 
 
#Accuracy using Logistic Regression Model
LR = LogisticRegression(C=0.0100000)
LR.fit(X_train_dtm, y_train)
y_predLR = LR.predict(X_test_dtm)
print('\nLogistic Regression')
print('Accuracy Score: ',metrics.accuracy_score(y_test,y_predLR)*100,'%',sep='')
print('Confusion Matrix: ',metrics.confusion_matrix(y_test,y_predLR), sep = '\n')
 
 
#Accuracy using KNN Model
KNN = KNeighborsClassifier(n_neighbors = 3)
KNN.fit(X_train_dtm, y_train)
y_predKNN = KNN.predict(X_test_dtm)
print('\nK Nearest Neighbors (NN = 3)')
print('Accuracy Score: ',metrics.accuracy_score(y_test,y_predKNN)*100,'%',sep='')
print('Confusion Matrix: ',metrics.confusion_matrix(y_test,y_predKNN), sep = '\n')
 
 
#Accuracy using KNN ModelV2
KNN = KNeighborsClassifier(n_neighbors = 7)
KNN.fit(X_train_dtm, y_train)
y_predKNN = KNN.predict(X_test_dtm)
print('\nK Nearest Neighbors (NN = 7)')
print('Accuracy Score: ',metrics.accuracy_score(y_test,y_predKNN)*100,'%',sep='')
print('Confusion Matrix: ',metrics.confusion_matrix(y_test,y_predKNN), sep = '\n')
 
 
 
#Random Forest Classifier
RF = RandomForestClassifier (n_estimators = 100, max_depth = 1000)
RF.fit(X_train_dtm,y_train)
y_predRF = RF.predict(X_test_dtm)
print('\n Random Forest Classifier')
print('Accuracy Score: ',metrics.accuracy_score(y_test,y_predRF)*100,'%',sep='')
print('Confusion Matrix: ',metrics.confusion_matrix(y_test,y_predRF), sep = '\n')
 
 
#Decision Tree
dt = DecisionTreeClassifier (max_depth = 20)
dt.fit(X_train_dtm,y_train)
y_predDT = dt.predict(X_test_dtm)
print('\n Decision Tree Classifier')
print('Accuracy Score: ',metrics.accuracy_score(y_test,y_predDT)*100,'%',sep='')
print('Confusion Matrix: ',metrics.confusion_matrix(y_test,y_predDT), sep = '\n')
 
 
 
#Accuracy using KNN Model
KNN = KNeighborsClassifier()
KNN.fit(X_train_dtm, y_train)
y_predKNN = KNN.predict(X_test_dtm)
print('\nK Nearest Neighbors ()')
print('Accuracy Score: ',metrics.accuracy_score(y_test,y_predKNN)*100,'%',sep='')
print('Confusion Matrix: ',metrics.confusion_matrix(y_test,y_predKNN), sep = '\n')
 
 
#Accuracy using KNN Model
KNN = KNeighborsClassifier(n_neighbors = 5)
KNN.fit(X_train_dtm, y_train)
y_predKNN = KNN.predict(X_test_dtm)
print('\nK Nearest Neighbors (NN = 5)')
print('Accuracy Score: ',metrics.accuracy_score(y_test,y_predKNN)*100,'%',sep='')
print('Confusion Matrix: ',metrics.confusion_matrix(y_test,y_predKNN), sep = '\n')
 
 
#Accuracy using SVM Model
SVM = SVC(kernel = 'linear', C = 0.1, gamma = 'auto')
SVM.fit(X_train_dtm, y_train)
y_predSVM = SVM.predict(X_test_dtm)
print('\nSupport Vector Machine')
print('Accuracy Score: ',metrics.accuracy_score(y_test,y_predSVM)*100,'%',sep='')
print('Confusion Matrix: ',metrics.confusion_matrix(y_test,y_predSVM), sep = '\n')
 
#Accuracy using SVM Model
SVM = SVC(kernel = 'poly', C = 0.1, gamma = 'auto')
SVM.fit(X_train_dtm, y_train)
y_predSVM = SVM.predict(X_test_dtm)
print('\nSupport Vector Machine')
print('Accuracy Score: ',metrics.accuracy_score(y_test,y_predSVM)*100,'%',sep='')
print('Confusion Matrix: ',metrics.confusion_matrix(y_test,y_predSVM), sep = '\n')
 
#Accuracy using SVM Model
SVM = SVC(kernel = 'sigmoid', C = 0.1, gamma = 'auto')
SVM.fit(X_train_dtm, y_train)
y_predSVM = SVM.predict(X_test_dtm)
print('\nSupport Vector Machine')
print('Accuracy Score: ',metrics.accuracy_score(y_test,y_predSVM)*100,'%',sep='')
print('Confusion Matrix: ',metrics.confusion_matrix(y_test,y_predSVM), sep = '\n')
 
 
 
#Accuracy using SVM Model
SVM = SVC(kernel = 'rbf', C = 10.00000, gamma = 'auto')
SVM.fit(X_train_dtm, y_train)
y_predSVM = SVM.predict(X_test_dtm)
print('\nSupport Vector Machine')
print('Accuracy Score: ',metrics.accuracy_score(y_test,y_predSVM)*100,'%',sep='')
print('Confusion Matrix: ',metrics.confusion_matrix(y_test,y_predSVM), sep = '\n')
 
 
